USE [DHTN-2025]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tran Duc Binh
-- Create date:	13/09/2025
-- Description:	Update process an incoming document by updating status, log opinion, add new user incoming document
-- =============================================
ALTER PROCEDURE [edoc].[Prc_UserIncomingDoc_SaveSingle]
    -- Add the parameters for the stored procedure here
    @Id BIGINT = 0,
    @IncomingDocId BIGINT,
    @UserSend INT = NULL,
    @UserSendName NVARCHAR(500) = NULL,
    @UserSendRoleId INT = NULL,
    @UserReceive INT = NULL,
    @UserReceiveName NVARCHAR(500) = NULL,
    @UserReceiveRoleId INT = NULL,
    @ReceiveRoleId INT = NULL,
    @ReceiveRoleUnitName NVARCHAR(500) = NULL,
    @SendDate DATETIME = NULL,
    @ReadDate DATETIME = NULL,
    @ExpiredDate DATETIME = NULL,
    @CompleteDate DATETIME = NULL,
    @Status INT,
    @SendType INT = NULL,
    @ProsessRoleId INT = NULL,
    @UserSendStatus INT = NULL,
    @UserReceiveStatus INT = NULL,
    @Note NVARCHAR(500) = NULL,
    @ProsessNote NVARCHAR(500) = NULL
AS
BEGIN
    BEGIN TRY
    BEGIN TRANSACTION;
        
    IF @Id = 0
    BEGIN
    INSERT INTO [edoc].[UserIncomingDoc]
           (
           [IncomingDocId]
           ,[UserSend]
           ,[UserSendName]
           ,[UserSendRoleId]
           ,[UserReceive]
           ,[UserReceiveName]
           ,[UserReceiveRoleId]
           ,[ReceiveRoleId]
           ,[ReceiveRoleUnitName]
           ,[SendDate]
           ,[ReadDate]
           ,[ExpiredDate]
           ,[CompleteDate]
           ,[Status]
           ,[SendType]
           ,[ProsessRoleId]
           ,[UserSendStatus]
           ,[UserReceiveStatus]
           ,[Note]
           ,[ProsessNote])
     VALUES
           (
            @IncomingDocId,
            @UserSend,
            @UserSendName,
            @UserSendRoleId,
            @UserReceive,
            @UserReceiveName,
            @UserReceiveRoleId,
            @ReceiveRoleId,
            @ReceiveRoleUnitName,
            @SendDate,
            @ReadDate,
            @ExpiredDate,
            @CompleteDate,
            @Status,
            @SendType,
            @ProsessRoleId,
            @UserSendStatus,
            @UserReceiveStatus,
            @Note,
            @ProsessNote
           );
    END
    ELSE
    BEGIN
    UPDATE [edoc].[UserIncomingDoc]
       SET [IncomingDocId] = @IncomingDocId
          ,[UserSend] = @UserSend
          ,[UserSendName] = @UserSendName
          ,[UserSendRoleId] = @UserSendRoleId
          ,[UserReceive] = @UserReceive
          ,[UserReceiveName] = @UserReceiveName
          ,[UserReceiveRoleId] = @UserReceiveRoleId
          ,[ReceiveRoleId] = @ReceiveRoleId
          ,[ReceiveRoleUnitName] = @ReceiveRoleUnitName
          ,[SendDate] = @SendDate
          ,[ReadDate] = @ReadDate
          ,[ExpiredDate] = @ExpiredDate
          ,[CompleteDate] = @CompleteDate
          ,[Status] = @Status
          ,[SendType] = @SendType
          ,[ProsessRoleId] = @ProsessRoleId
          ,[UserSendStatus] = @UserSendStatus
          ,[UserReceiveStatus] = @UserReceiveStatus
          ,[Note] = @Note
          ,[ProsessNote] = @ProsessNote
     WHERE Id = @Id
    END

    COMMIT TRANSACTION;
    /*******************************************************************************
	* End of SQL statement(s).
	*******************************************************************************/
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(MAX),
                @ErrorNumber INT,
                @ErrorSeverity INT,
                @ErrorState INT,
                @ErrorLine INT,
                @ErrorProcedure NVARCHAR(200);

        -- Assign variables to error-handling functions that capture information for RAISERROR.
        SELECT @ErrorNumber = ERROR_NUMBER(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE(),
               @ErrorLine = ERROR_LINE(),
               @ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

        -- Build the message string that will contain original error information.
        SELECT @ErrorMessage = N'Error %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + ERROR_MESSAGE();

        -- Only set the error state if its been set to zero
        IF (@ErrorState = 0)
            SET @ErrorState = 1;

        -- Raise an error: msg_str parameter of RAISERROR will contain the original error information.
        RAISERROR(   @ErrorMessage,
                     @ErrorSeverity,
                     @ErrorState,
                     @ErrorNumber,    -- parameter: original error number.
                     @ErrorSeverity,  -- parameter: original error severity.
                     @ErrorState,     -- parameter: original error state.
                     @ErrorProcedure, -- parameter: original error procedure name.
                     @ErrorLine       -- parameter: original error line number.
                 );
    END CATCH;
END;
