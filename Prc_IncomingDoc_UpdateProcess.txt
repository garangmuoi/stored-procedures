USE [DHTN-2025]
GO
/****** Object:  StoredProcedure [edoc].[Prc_IncomingDoc_UpdateProcess]    Script Date: 9/15/2025 8:29:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tran Duc Binh
-- Create date:	13/09/2025
-- Description:	Update process an incoming document by updating status, log opinion
-- =============================================
ALTER PROCEDURE [edoc].[Prc_IncomingDoc_UpdateProcess]
    -- Add the parameters for the stored procedure here
    @IncomingDocId BIGINT,
    @UserId INT,
    @RoleId INT,
    @Status INT = NULL,
    @Opinion NVARCHAR(MAX),
    @OpinionType INT,
    @ReturnStatus BIT = NULL
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
        --
        -- All other declarations and initialisation
        --
        DECLARE @current_date DATETIME = GETDATE();

        /*******************************************************************************
		* Add SQL statement(s) here.
		*******************************************************************************/
        IF @ReturnStatus IS NOT NULL
        BEGIN
            -- Update the IncomingDoc ReturnStatus
            UPDATE edoc.IncomingDoc
            SET ReturnStatus = @ReturnStatus,
                ModifiedUserId = @UserId,
                ModifiedDate = @current_date
            WHERE Id = @IncomingDocId;
        END;

        IF @Status IS NOT NULL
        BEGIN
            -- Update the IncomingDoc status
            UPDATE edoc.IncomingDoc
            SET Status = @Status,
                ModifiedUserId = @UserId,
                ModifiedDate = @current_date
            WHERE Id = @IncomingDocId;
        END;

        -- Insert opinion into OpinionIncomingDoc
        BEGIN
            INSERT INTO edoc.OpinionIncomingDoc (IncomingDocId, OpinionUserId, Opinion, Status, OpinionDate, OpinionType, OpinionUserRoleId)
            VALUES
            (@IncomingDocId, @UserId, @Opinion, 1, @current_date, @OpinionType, @RoleId);

            IF @Status > 1 AND  NOT EXISTS
            (
                SELECT 1
                FROM edoc.UserIncomingDoc u
                WHERE u.IncomingDocId = @IncomingDocId
                      AND u.UserReceive = @UserId
                      AND u.UserReceiveRoleId = @RoleId
            )
                -- Insert recipients into UserIncomingDoc
                INSERT INTO edoc.UserIncomingDoc
                (
                    IncomingDocId,
                    UserSend,
                    UserSendRoleId,
                    Status,
                    SendType,
                    UserReceive,
                    UserReceiveRoleId,
                    ProsessRoleId,
                    SendDate,
                    ExpiredDate,
                    CompleteDate,
                    UserSendStatus,
                    UserReceiveStatus
                )
                VALUES
                (@IncomingDocId, @UserId, @RoleId, 1, 1, @UserId, @RoleId, 0, @current_date, NULL, NULL, 0,0);

        END;
        COMMIT TRANSACTION;

    /*******************************************************************************
		* End of SQL statement(s).
		*******************************************************************************/
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(MAX),
                @ErrorNumber INT,
                @ErrorSeverity INT,
                @ErrorState INT,
                @ErrorLine INT,
                @ErrorProcedure NVARCHAR(200);

        -- Assign variables to error-handling functions that capture information for RAISERROR.
        SELECT @ErrorNumber = ERROR_NUMBER(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE(),
               @ErrorLine = ERROR_LINE(),
               @ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

        -- Build the message string that will contain original error information.
        SELECT @ErrorMessage = N'Error %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + ERROR_MESSAGE();

        -- Only set the error state if its been set to zero
        IF (@ErrorState = 0)
            SET @ErrorState = 1;

        -- Raise an error: msg_str parameter of RAISERROR will contain the original error information.
        RAISERROR(   @ErrorMessage,
                     @ErrorSeverity,
                     @ErrorState,
                     @ErrorNumber,    -- parameter: original error number.
                     @ErrorSeverity,  -- parameter: original error severity.
                     @ErrorState,     -- parameter: original error state.
                     @ErrorProcedure, -- parameter: original error procedure name.
                     @ErrorLine       -- parameter: original error line number.
                 );
    END CATCH;
END;
