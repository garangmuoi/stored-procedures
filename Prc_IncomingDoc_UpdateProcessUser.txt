USE [DHTN-2025]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tran Duc Binh
-- Create date:	13/09/2025
-- Description:	Update process an incoming document by updating status, log opinion, add new user incoming document
-- =============================================
ALTER PROCEDURE [edoc].[Prc_IncomingDoc_UpdateProcessUser]
    -- Add the parameters for the stored procedure here
    @IncomingDocId BIGINT,
    @UserId INT,
    @RoleId INT,
	@Status INT,
	@Opinion NVARCHAR(MAX),
	@OpinionType INT,
	@ReturnStatus BIT = NULL,
	@SendType INT = 1,
	@ExpiredDate DATETIME = NULL,
	@CompleteDate DATETIME = NULL,
    @Recipients XML
AS
BEGIN
    BEGIN TRY
        --
        -- All other declarations and initialisation
        --
        DECLARE @current_date DATETIME = GETDATE(),
                @UserSendStatus INT = NULL
        
        SELECT @UserSendStatus = Status
        FROM edoc.IncomingDoc
        WHERE Id = @IncomingDocId;

        -- Declare temp table to parse Recipients
        IF OBJECT_ID('tempdb..#Recipients') IS NOT NULL
            DROP TABLE #Recipients;
        CREATE TABLE #Recipients
        (
            RecipientId INT,
            RecipientName NVARCHAR(255),
            RecipientRoleId INT,
            RecipientProsessRoleId INT
        );

        -- Parse the XML into the temp table #Recipients
        INSERT INTO #Recipients (RecipientId, RecipientName, RecipientRoleId, RecipientProsessRoleId)
        SELECT 
            x.v.value('(UserId)[1]', 'INT') AS RecipientId,
            x.v.value('(UserName)[1]', 'NVARCHAR(255)') AS RecipientName,
            x.v.value('(RoleId)[1]', 'INT') AS RecipientRoleId,
			x.v.value('(ProsessRoleId)[1]', 'INT') AS RecipientProsessRoleId
        FROM @Recipients.nodes('/Recipients/Recipient') x(v);

        /*******************************************************************************
		* Add SQL statement(s) here.
		* Update status, log opinion, and transfer to recipients
		*******************************************************************************/

        -- Update the IncomingDoc
        UPDATE edoc.IncomingDoc
        SET Status = @Status,
            ReturnStatus = @ReturnStatus,
            ModifiedUserId = @UserId,
            ModifiedDate = @current_date
        WHERE Id = @IncomingDocId;

        -- Insert opinion into OpinionIncomingDoc for each recipient
        INSERT INTO edoc.OpinionIncomingDoc (
            IncomingDocId,
            OpinionUserId,
			OpinionUserRoleId,
            Opinion,
            Status,
            OpinionDate,
            OpinionType,
            UserReceive,
			UserReceiveName,
			SendDate,
			ExpiredDate,
			CompleteDate
        )
        SELECT 
            @IncomingDocId,
            @UserId,
			@RoleId,
            @Opinion,
            1,
            @current_date,
            @OpinionType,
            RecipientId,
			RecipientName,
			@current_date,
			@ExpiredDate,
			@CompleteDate
        FROM #Recipients
        WHERE RecipientId IS NOT NULL;

        -- Insert recipients into UserIncomingDoc
        INSERT INTO edoc.UserIncomingDoc (
            IncomingDocId,
            UserSend,
            UserSendRoleId,
            Status,
            SendType,
            UserReceive,
            UserReceiveRoleId,
            ProsessRoleId,
			SendDate,
			ExpiredDate,
			CompleteDate,
			UserSendStatus,
			UserReceiveStatus
        )
        SELECT 
            @IncomingDocId,
            @UserId,
            @RoleId,
            0,
            @SendType,
            RecipientId,
            RecipientRoleId,
            RecipientProsessRoleId,
			@current_date,
			@ExpiredDate,
			@CompleteDate,
			@UserSendStatus,
			@Status
        FROM #Recipients
        WHERE RecipientId IS NOT NULL;

    /*******************************************************************************
		* End of SQL statement(s).
		*******************************************************************************/
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(MAX),
                @ErrorNumber INT,
                @ErrorSeverity INT,
                @ErrorState INT,
                @ErrorLine INT,
                @ErrorProcedure NVARCHAR(200);

        -- Assign variables to error-handling functions that capture information for RAISERROR.
        SELECT @ErrorNumber = ERROR_NUMBER(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE(),
               @ErrorLine = ERROR_LINE(),
               @ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

        -- Build the message string that will contain original error information.
        SELECT @ErrorMessage = N'Error %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + ERROR_MESSAGE();

        -- Only set the error state if its been set to zero
        IF (@ErrorState = 0)
            SET @ErrorState = 1;

        -- Raise an error: msg_str parameter of RAISERROR will contain the original error information.
        RAISERROR(   @ErrorMessage,
                     @ErrorSeverity,
                     @ErrorState,
                     @ErrorNumber,    -- parameter: original error number.
                     @ErrorSeverity,  -- parameter: original error severity.
                     @ErrorState,     -- parameter: original error state.
                     @ErrorProcedure, -- parameter: original error procedure name.
                     @ErrorLine       -- parameter: original error line number.
                 );
    END CATCH;
END;
GO